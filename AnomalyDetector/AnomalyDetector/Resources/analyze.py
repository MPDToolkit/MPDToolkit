import sys
import os
import cv2 as cv
import numpy as np
import scipy as sp
import spectral as spc
from scipy.stats import chi2
from multiprocessing import Pool
from argparse import ArgumentParser
import glob

import timer    #Timer class

#Algorithm Libraries
from RXDetector import RXD
from DXDetector import DebrisDetect

#--------------------------------------------------------------------------------------------------------
#--------------------------------------------------------------------------------------------------------
#--------------------------------------------------------------------------------------------------------

#Global Variables
img_list = []
parser = ArgumentParser()
extensions = (".jpg", ".jpeg", ".png")

detected_folder = "Detected"
other_folder = "Other"
copy_folder = "Copy"

#Analysis Parameters
total_time = timer.Timer()

#Default values in dictionaries
RXDParams = {"RxThreshold":90.0, "RxChiThreshold":0.999}
DXDParams = {"LineGaussianIter":0, "LineDilationIter":1, "LineBilatBlurColor":75,"LineBilatBlurSpace":75, "LineCannyEdgeLowerBound":100,"LineCannyEdgeThreshold":0, "LineThreshold":-1, "CornerGaussianIter":0,"CornerErosionIter":1,"CornerBilateralColor":200,"CornerBilateralSpace":500, "CornerMaxDistance":75, "CornerNumPoints":3}


#--------------------------------------------------------------------------------------------------------
#--------------------------------------------------------------------------------------------------------
#--------------------------------------------------------------------------------------------------------
#--------------------------------------------------------------------------------------------------------
#--------------------------------------------------------------------------------------------------------
#--------------------------------------------------------------------------------------------------------
#--------------------------------------------------------------------------------------------------------
#--------------------------------------------------------------------------------------------------------
#--------------------------------------------------------------------------------------------------------
#--------------------------------------------------------------------------------------------------------
#--------------------------------------------------------------------------------------------------------
#--------------------------------------------------------------------------------------------------------
#--------------------------------------------------------------------------------------------------------
#--------------------------------------------------------------------------------------------------------
#--------------------------------------------------------------------------------------------------------

#Outputs backend stsatus to the frontend
def status(flag, in_str=None):

    if flag is None or in_str is None:
        return

    if flag == '-i-':	#Initialization
        print("{0} {1}".format( flag, in_str ))

    if flag == '-d-':	#Detected
        print("{0} {1} {2:.3f}ms {3:.6f}%".format( flag, in_str[0], in_str[1], in_str[2]) )

    if flag == '-o-':	#Other
        print("{0} {1} {2:.3f}ms {3:.6f}%".format( flag, in_str[0], in_str[1], in_str[2]) )


    if flag == '-f-':   #Finished
        print('-f- Finished Image Analysis...\n')
        print("\n{0} image(s) analyzed\n".format( in_str[1] ))
        print("Average elapsed time: {0:.3f} ms".format( (in_str[0] * 1000) / in_str[1] ) )
        print("Total elapsed time: {0:.3f} sec\n".format( in_str[0] ) )

    if flag == '-e-':	#Error
        print('-e- ')
        print("Exception occurred in analyze.py: \n")
        print( in_str + "\n")

    sys.stdout.flush()


#--------------------------------------------------------------------------------------------------------
#--------------------------------------------------------------------------------------------------------
#--------------------------------------------------------------------------------------------------------
#--------------------------------------------------------------------------------------------------------


#Analyze the given image (img)
def run(img):

    #--------------------------------------------------------------------------------------------------------
    #--------------------------------------------------------------------------------------------------------
    #Call the algorithms

    rx = RXD(img, RXDParams)
    dx = DebrisDetect(img, DXDParams)


    
    #--------------------------------------------------------------------------------------------------------
    #--------------------------------------------------------------------------------------------------------

    #Print merged results for frontend to read
    img_name = rx[0]
    run_time = rx[2] + dx[2]
    stats = rx[3] + dx[3]
    raw_scores = rx[1] + dx[1]
    
    #Apply colormap to the combined heatmap
    final_heatmap = cv.applyColorMap( raw_scores.astype(np.uint8), cv.COLORMAP_JET )


    #RXD Debug
    if rx[4] == 'D' or dx[4] == 'D':
        results_str = [ img_name, run_time, stats ]
        status('-d-', results_str)
        cv.imwrite(os.path.join( detected_folder, img_name + ".jpg"), final_heatmap)

    else:
        results_str = [ img_name, run_time, stats ]
        status( '-o-', results_str)
        cv.imwrite(os.path.join( other_folder, img_name + ".jpg"), final_heatmap)


#--------------------------------------------------------------------------------------------------------
#--------------------------------------------------------------------------------------------------------
#--------------------------------------------------------------------------------------------------------
#--------------------------------------------------------------------------------------------------------
#--------------------------------------------------------------------------------------------------------
#--------------------------------------------------------------------------------------------------------
#--------------------------------------------------------------------------------------------------------
#--------------------------------------------------------------------------------------------------------
#--------------------------------------------------------------------------------------------------------
#--------------------------------------------------------------------------------------------------------
#--------------------------------------------------------------------------------------------------------
#--------------------------------------------------------------------------------------------------------
#--------------------------------------------------------------------------------------------------------
#--------------------------------------------------------------------------------------------------------
#--------------------------------------------------------------------------------------------------------


try:
    
    #--------------------------------------------------------------------------------------------------------
    #--------------------------------------------------------------------------------------------------------

    parser.add_argument("-F", "--folder", dest="folderPath", help="path to the folder containing images to process.", metavar="folder", default=None)
    parser.add_argument("-p", "--processes", dest="procNum", help="Number of processes to create to process images", default=1, metavar="threads")
    args = parser.parse_args()
    
    #--------------------------------------------------------------------------------------------------------
    #--------------------------------------------------------------------------------------------------------

    #Get parameters.ini file
    paramFile = open(os.path.join( os.path.dirname(sys.argv[0]), "parameters.ini"), "r")      #current path is "..\bin\analyze.py", therefore need to backup to root folder "bin"

    #Add code to read in the parameters from the file Here to overwrite the defaults
    for line in paramFile:
        if line[0] == '#':
            pass
        else:
            #split the line into a list
            splitLine=line.strip().split("=")
            #see if parameter is in our dictionary
            #splitline[1] is 1 for default, 0 for User value
            if splitLine[0] in DXDParams and int(splitLine[1]) is 0:
                DXDParams[splitLine[0]] = float(splitLine[3])
                #print("set parameter: %s", splitLine[0])
            if splitLine[0] in RXDParams and int(splitLine[1]) is 0:
                RXDParams[splitLine[0]] = float(splitLine[3])
                #print("set parameter: %s", splitLine[0])

    #--------------------------------------------------------------------------------------------------------
    #--------------------------------------------------------------------------------------------------------

    job_path = args.folderPath
    copy_folder = os.path.join( job_path, copy_folder)

    #--------------------------------------------------------------------------------------------------------
    #--------------------------------------------------------------------------------------------------------

    #Looks in the copy folder and adds the correct file types to the image list
    #This is a case insensitive version
    if os.path.exists(copy_folder):
        for file in glob.glob(os.path.join(copy_folder, '*')):
            ext = os.path.splitext(file)[-1]
            if ext.lower() in extensions:
                img_list.append(file)
    else:
        for file in glob.glob(os.path.join(job_path, '*')):
            ext = os.path.splitext(file)[-1]
            if ext.lower() in extensions:
                img_list.append(file)

    #--------------------------------------------------------------------------------------------------------
    #--------------------------------------------------------------------------------------------------------

    #Create the output directory if it does not exist
    if not os.path.exists(os.path.join( job_path, detected_folder)):
        os.makedirs(os.path.join( job_path, detected_folder))

    if not os.path.exists(os.path.join( job_path, other_folder)):
        os.makedirs(os.path.join( job_path, other_folder))

    detected_folder = os.path.join( job_path, detected_folder)
    other_folder = os.path.join( job_path, other_folder)

    #--------------------------------------------------------------------------------------------------------
    #--------------------------------------------------------------------------------------------------------
    
    if __name__ == '__main__':
        total_time.start()
        status('-i-', 'Initialization completed')
        status('-i-', 'Beginning Image Analysis...')

    #--------------------------------------------------------------------------------------------------------
    #--------------------------------------------------------------------------------------------------------

    if __name__ == '__main__':  #In Windows you need to protect the thread creation froms each child thread. If not done, each child thread will create subthreads.
        if int(args.procNum) > 1:
            with Pool(int(args.procNum)) as p:
                p.map(run, img_list)
        else:
            for i in range(0, len(img_list)):
                run(img_list[i])

    #--------------------------------------------------------------------------------------------------------
    #--------------------------------------------------------------------------------------------------------

    if __name__ == '__main__':
        total_time.stop()

    #--------------------------------------------------------------------------------------------------------
    #--------------------------------------------------------------------------------------------------------

    if __name__ == '__main__':    #Replace with writing to log file
        status('-f-', [ total_time.get_time(), len(img_list) ] )

    #--------------------------------------------------------------------------------------------------------
    #--------------------------------------------------------------------------------------------------------

except Exception as e:
    #print("exception handled in analyze.py: \n")
    #print(str(e) + "\n")
    status('-e-', str(e) )



#--------------------------------------------------------------------------------------------------------
#--------------------------------------------------------------------------------------------------------
#--------------------------------------------------------------------------------------------------------
#--------------------------------------------------------------------------------------------------------
#--------------------------------------------------------------------------------------------------------
#--------------------------------------------------------------------------------------------------------
#--------------------------------------------------------------------------------------------------------
#--------------------------------------------------------------------------------------------------------
#--------------------------------------------------------------------------------------------------------
#--------------------------------------------------------------------------------------------------------
#--------------------------------------------------------------------------------------------------------
#--------------------------------------------------------------------------------------------------------
#--------------------------------------------------------------------------------------------------------
#--------------------------------------------------------------------------------------------------------
#--------------------------------------------------------------------------------------------------------
